{"version":3,"sources":["robots.js","Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorHandling.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","className","alt","src","CardList","map","user","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorHandling","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45a6bbaf.chunk.js","sourcesContent":["export const robots = [\n    {\n        id: 1,\n        name: 'Leanne Graham',\n        username: 'Bret',\n        email: 'Sincere@april.biz'\n    },\n    {\n        id: 2,\n        name: 'Ervin Howell',\n        username: 'Antonette',\n        email: 'Shanna@melissa.tv'\n    },\n    {\n        id: 3,\n        name: 'Clementine Bauch',\n        username: 'Samantha',\n        email: 'Nathan@yesenia.net'\n    },\n    {\n        id: 4,\n        name: 'Patricia Lebsack',\n        username: 'Karianne',\n        email: 'Julianne.OConner@kory.org'\n    },\n    {\n        id: 5,\n        name: 'Chelsey Dietrich',\n        username: 'Kamren',\n        email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n        id: 6,\n        name: 'Mrs. Dennis Schulist',\n        username: 'Leopoldo_Corkery',\n        email: 'Karley_Dach@jasper.info'\n    },\n    {\n        id: 7,\n        name: 'Kurtis Weissnat',\n        username: 'Elwyn.Skiles',\n        email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n        id: 8,\n        name: 'Nicholas Runolfsdottir V',\n        username: 'Maxime_Nienow',\n        email: 'Sherwood@rosamond.me'\n    },\n    {\n        id: 9,\n        name: 'Glenna Reichert',\n        username: 'Delphine',\n        email: 'Chaim_McDermott@dana.io'\n    },\n    {\n        id: 10,\n        name: 'Clementina DuBuque',\n        username: 'Moriah.Stanton',\n        email: 'Rey.Padberg@karina.biz'\n    }\n];\n","import React from 'react';\n\nconst Card = ({id, name, email}) =>{\n\n    return(\n        <div className='tc bg-light-green dib pa3 br3 ma3 grow bw2 shadow-5' >\n            <img alt='Robofriend' src= {`https://robohash.org/${id}?200x200`}  />\n            <div>\n                <h2>{name} </h2>\n                <p>{email} </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { Fragment } from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) =>{\n    // const cardsArray = robots.map((user, index)=> {\n    //     return <Card key={index} id={user.id} name={user.name} email={user.email} />\n    // });\n\n    return(\n        <Fragment>\n            {\n                robots.map((user, index)=> {\n                return <Card key={index} id={user.id} name={user.name} email={user.email} />\n            })\n            }\n        </Fragment>\n    );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n    return(\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-light-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n  return(\n      <div style={{overflowY:'scroll', border:'5px solid black', height:'500px' }}>\n          {props.children}\n      </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorHandling extends Component {\n    constructor(props){\n        super(props);\n        this.state={ hasError: false}\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        const { hasError } = this.state;\n        if (hasError){\n            return <h1>Oppss... An error occured</h1>\n        }\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorHandling;\n","import React, { Component } from 'react';\nimport { robots } from \"./robots\";\n\nimport CardList from \"./CardList\";\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorHandling from \"./ErrorHandling\";\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state={\n            robots: [],\n            searchfield: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then((response)=>{\n               return response.json()\n            })\n            .then((users)=>{\n                this.setState({robots: users})\n            })\n        this.setState({robots: robots});\n        console.log('componentDidMount');\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n\n        // console.log(filteredRobots);\n        // this.setState({robots: filteredRobots});\n    };\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n\n        return(\n            <div className='tc'>\n                <h1>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorHandling>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorHandling>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}